{
  "name": "Shader-Particles",
  "version": "0.7.4",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-contrib-uglify": "~0.2.2"
  },
  "readme": "ShaderParticleEngine\n====================\nA GLSL-heavy particle engine for THREE.js. Based on [Stemkoski's great particle engine](https://github.com/stemkoski/stemkoski.github.com/blob/master/Three.js/js/ParticleEngine.js).\n\n\nPull requests and issue reports welcome. Please see the notes on pull requests at the end of this document.\n\n\nVersion 0.7.4\n=============\nThe latest release has jumped from ```0.5.1``` to ```0.7.4```. There are no release versions in between - the party was all on the dev branch. A full log of the changes between these versions is available in the changelog towards the end of this document. There have been a lot of changes since ```0.5.1```, so if you're updating, please check the [Breaking Changes](https://github.com/squarefeet/ShaderParticleEngine#breaking-changes) and [Changelog](https://github.com/squarefeet/ShaderParticleEngine#changelog) to play catchup.\n\nIn between ```0.5.1``` and ```0.7.4```, there have been some contributions from the community to the library:\n\n* [@DelvarWorld](https://github.com/delvarworld/)) has kindly brought this library into a much fitter state than it was before, and feature contributions from [@stemkoski](https://github.com/stemkoski/)) have been combined into the ```0.7.4``` release.\n\n\nCurrently not at ```1.0.0```, so the API might change. Please be aware of this when using this library.\n\n\nBreaking Changes\n================\n* **Version 0.7.4** There's a change in the way the total number of particles an emitter has is calculated, and one emitter option rename:\n\t* ```SPE.Emitter#particlesPerSecond``` is now ```SPE.Emitter#particleCount```.\n\t\t* Rather than specifying how many particles an emitter will produce per second, you now specify the total number of particles yourself.\n\t* Renamed ```SPE.Emitter#emitterDuration``` to ```SPE.Emitter#duration```.\n\n* **Version 0.7.3** has renamed and added a lot of emitter options. Opacity, color, size, and angle are now consistent. They all have *Start, *Middle, and *End varients, as well as *StartSpread, *MiddleSpread, and *EndSpread varients. As an example:\n\t* ```opacityStart```, ```opacityStartSpread```,\n\t* ```opacityMiddle```, ```opacityMiddleSpread```,\n\t* ```opacityEnd```, ```opacityEndSpread```.\n\n* **Version 0.7.2** packages up the emitter objects (Group, Emitter, utils) into one namespace: ```SPE```.\n\t* To create a particle group from **v0.7.2+**: ```new SPE.Group( ... )```.\n\t* To create a particle emitter from **v0.7.2+**: ```new SPE.Emitter( ... )```.\n\n\n\nAbout\n=====\nAfter experimenting with Stemkoski's particle engine, I was having trouble getting high numbers of particles to render at ~60fps. After digging into the code and doing some benchmarks, it was clear that the bottleneck was coming from applying each particle's movement parameters (```velocity += acceleration```, and ```position += velocity```). After moving these calculations to the shaders the performance was drastically increased.\n\nAnother optimisation I wanted was to be able to 'group' lots of emitters into one ```THREE.ParticleSystem```, so that if I had (for example) 20 particle emitters sharing the same texture, I could send all 20 of those emitters to the GPU at the same time via sharing the same geometry. This is where the basis for the ```ShaderParticleGroup``` comes from.\n\nThis project requires THREE.js revision 58 to revision 65.\n\n\n\nUsage\n=====\nSee the ```./examples/``` folder (or [here](http://squarefeet.github.io/ShaderParticleEngine/)) for some simple demos.\n\nAssuming you have a basic scene set up using THREE.js and have added the JS to your page, adding a particle emitter is as simple as the following code:\n\n```javascript\n// Create a particle group to add the emitter to.\nvar particleGroup = new SPE.Group({\n\t// Give the particles in this group a texture\n\ttexture: THREE.ImageUtils.loadTexture('path/to/your/texture.file'),\n\n\t// How long should the particles live for? Measured in seconds.\n\tmaxAge: 5\n});\n\n// Create a single emitter\nvar particleEmitter = new SPE.Emitter({\n\ttype: 'cube',\n\tposition: new THREE.Vector3(0, 0, 0),\n\tacceleration: new THREE.Vector3(0, 10, 0),\n\tvelocity: new THREE.Vector3(0, 15, 0),\n\tparticlesPerSecond: 100,\n\tsizeStart: 10,\n\tsizeEnd: 0,\n\topacityStart: 1,\n\topacityEnd: 0,\n\tcolorStart: new THREE.Color('blue'),\n\tcolorEnd: new THREE.Color('white')\n});\n\n// Add the emitter to the group.\nparticleGroup.addEmitter( particleEmitter );\n\n// Add the particle group to the scene so it can be drawn.\nscene.add( particleGroup.mesh ); // Where `scene` is an instance of `THREE.Scene`.\n\n// ...\n\n// In your frame render function:\n// \tWhere dt is the time delta\n// \t(the time it took to render the last frame.)\nparticleGroup.tick( dt );\n\n```\n\n\nAPI\n===\n\n####```SPE.Group``` options:####\n\n```javascript\n// All possible parameters for the SPE.Group constructor.\n// - Default values for each key are as given below if the key is [OPTIONAL].\nvar particleGroup = new SPE.Group({\n\n\t// [REQUIRED] Give the particles in this group a texture.\n\ttexture: THREE.ImageUtils.loadTexture('path/to/your/texture.file'),\n\n\t// [OPTIONAL] How long should the particles live for? Measured in seconds.\n\tmaxAge: 3,\n\n\t// [OPTIONAL] Should the particles have perspective applied when drawn?\n\t// Use 0 for false and 1 for true.\n\thasPerspective: 1,\n\n\t// [OPTIONAL] Should the particles in this group have a color applied?\n\t// Use 0 for false and 1 for true\n\tcolorize: 1,\n\n\t// [OPTIONAL] What blending style should be used?\n\t// THREE.NoBlending\n\t// THREE.NormalBlending\n\t// THREE.AdditiveBlending\n\t// THREE.SubtractiveBlending\n\t// THREE.MultiplyBlending\n\tblending: THREE.AdditiveBlending,\n\n\t// [OPTIONAL] Should transparency be applied?\n\ttransparent: true,\n\n\t// [OPTIONAL] What threshold should be used to test the alpha channel?\n\talphaTest: 0.5,\n\n\t// [OPTIONAL] Should this particle group be written to the depth buffer?\n\tdepthWrite: false,\n\n\t// [OPTIONAL] Should a depth test be performed on this group?\n\tdepthTest: true,\n\n\t// [OPTIONAL] Specify a fixed time-step value if you're more bothered\n\t// about smooth performance. Only use this if necessary. Measured in seconds.\n\tfixedTimeStep: 0.016\n});\n```\n\n\n####```SPE.Emitter``` settings:\n\n```javascript\n// All possible parameters for the SPE.Emitter constructor\n// - Default values for each key are as given below if the key is [OPTIONAL]\nvar particleEmitter = new SPE.Emitter({\n\n\t// [OPTIONAL] Emitter shape.\n\t// \t'cube', 'sphere', or 'disk'\n\t// \t\tWhen using 'sphere' or 'disk' shape, use `radius` and `speed` parameters.\n\t// \t\tWhen using 'cube' shape, use `acceleration` and `velocity` parameters.\n\ttype: 'cube',\n\n\n\t// [OPTIONAL] Base position for the emitter. Can be changed over time.\n\tposition: new THREE.Vector3(0, 0, 0),\n\n\t// [OPTIONAL] Particle start position variance.\n\tpositionSpread: new THREE.Vector3(0, 0, 0),\n\n\n\t// [OPTIONAL] Acceleration base vector.\n\tacceleration: new THREE.Vector3(0, 0, 0),\n\n\t// [OPTIONAL] Acceleration variance.\n\taccelerationSpread: new THREE.Vector3(0, 0, 0),\n\n\n\t// [OPTIONAL] Velocity base vector.\n\tvelocity: new THREE.Vector3(0, 0, 0),\n\n\t// [OPTIONAL] Velocity variance.\n\tvelocitySpread: new THREE.Vector3(0, 0, 0),\n\n\n\t// [OPTIONAL - Sphere type] Starting position radius.\n\tradius: 10,\n\n\t// [OPTIONAL - Sphere type] Starting position radius scale.\n\tradiusScale: new THREE.Vector3(1, 1, 1),\n\n\t// [OPTIONAL - Sphere type] Particle speed.\n\tspeed: 0,\n\n\t// [OPTIONAL - Sphere type] Particle speed variance.\n\tspeedSpread: 0,\n\n\n\t// [OPTIONAL] Particle start size.\n\tsizeStart: 10,\n\n\t// [OPTIONAL] Particle start size variance.\n\tsizeStartSpread: 0,\n\n\t// [OPTIONAL] Particle middle size.\n\t// If not specified, it will be set to halfway between the \n\t// `sizeStart` and `sizeEnd` values.\n\tsizeMiddle: 10,\n\n\t// [OPTIONAL] Particle middle size variance.\n\tsizeMiddleSpread: 0,\n\n\t// [OPTIONAL] Particle end size.\n\tsizeEnd: 10,\n\n\t// [OPTIONAL] Particle end size variance.\n\tsizeEndSpread: 0,\n\n\n\t// [OPTIONAL] Particle rotation start angle (radians).\n\tangleStart: 0,\n\n\t// [OPTIONAL] Particle rotation start angle spread (radians).\n\tangleStartSpread: 0,\n\n\t// [OPTIONAL] Particle rotation middle angle (radians).\n\tangleMiddle: 0,\n\n\t// [OPTIONAL] Particle rotation middle angle spread (radians).\n\tangleMiddleSpread: 0,\n\n\t// [OPTIONAL] Particle rotation end angle (radians).\n\tangleEnd: 0,\n\n\t// [OPTIONAL] Particle rotation end angle spread (radians).\n\tangleEndSpread: 0,\n\n\t// [OPTIONAL] Align particle angle along its velocity vector\n\t// If this property is set to `true`, then all other angle properties \n\t// are ignored.\n\tangleAlignVelocity: false,\n\n\n\t// [OPTIONAL] Particle start colour.\n\tcolorStart: new THREE.Color( 'white' ),\n\n\t// [OPTIONAL] Particle start colour variance.\n\tcolorStartSpread: new THREE.Vector3(0, 0, 0),\n\n\t// [OPTIONAL] Particle middle colour.\n\t// If not specified, it will be set to halfway between the \n\t// `colorStart` and `colorEnd` values.\n\tcolorMiddle: new THREE.Color( 'white' ),\n\n\t// [OPTIONAL] Particle middle colour variance.\n\tcolorMiddleSpread: new THREE.Vector3(0, 0, 0),\n\n\t// [OPTIONAL] Particle end colour.\n\tcolorEnd: new THREE.Color( 'blue' ),\n\n\t// [OPTIONAL] Particle end colour variance.\n\tcolorEndSpread: new THREE.Vector3(0, 0, 0),\n\n\n\n\t// [OPTIONAL] Particle start opacity.\n\topacityStart: 1,\n\n\t// [OPTIONAL] Particle start opacity variance.\n\topacityStartSpread: 0,\n\n\t// [OPTIONAL] Particle middle opacity.\n\t// The opacity value at half a particle's lifecycle.\n\t// If not specified, it will be set to halfway between the\n\t// `opacityStart` and `opacityEnd` values.\n\topacityMiddle: 0.5,\n\n\t// [OPTIONAL] Particle middle opacity variance.\n\topacityMiddleSpread: 0,\n\n\t// [OPTIONAL] Particle end opacity.\n\topacityEnd: 0,\n\n\t// [OPTIONAL] Particle end opacity variance.\n\topacityEndSpread: 0,\n\n\n\t// [OPTIONAL] The number of particles emitted per second.\n\tparticlesPerSecond: 100,\n\n\t// [OPTIONAL] Emitter duration. Measured in seconds.\n\t// \tA null value indicates an infinite duration.\n\temitterDuration: null,\n\n\t// [OPTIONAL] Should this emitter be alive (i.e. should it be emitting)?\n\t// 0 for false, 1 for true\n\talive: 1,\n\n\t// [OPTIONAL] New in v0.4.0. If you want a huge amount of particles, and\n\t// they aren't going to be moving, then set this property to `1`. This will\n\t// take the start values for color, opacity, and size (with spreads applied),\n\t// not add the emitter from its group's tick function, and so will be static.\n\t// See the static.html file in the examples directory for more.\n\tisStatic: 0\n});\n```\n\n####\"Public\" Methods for ```SPE.Group```:####\n\n**- ```.addEmitter( emitter )```**\nAdds an instance of ```SPE.Emitter``` to the particle group.\n\n**- ```.tick( dt )```**\nCall this function once per frame. If no ```dt``` argument is given, the ```SPE.Group``` instance will use its ```.fixedTimeStep``` value as ```dt```.\n\n**- ```.addPool( numEmitters, emitterSettings, createNewEmitterIfPoolRunsOut )```**\nAutomatically create a pool of emitters for easy triggering in the future.\n\n**- ```.triggerPoolEmitter( numEmittersToActivate, positionVector )```**\nTurn on a given number of emitters that live in a pool created using the method above. You can also pass a ```THREE.Vector3``` instance to dictate where this emitter will sit.\n\n\nChangelog\n=========\n**Version 0.7.4**\n* Deprecated ```SPE.Emitter#particlesPerSecond``` in favour of ```SPE.Emitter#particleCount```.\n* Renamed ```SPE.Emitter#emitterDuration``` to ```SPE.Emitter#duration```.\n\n**Version 0.7.3**\n* Added the following properties:\n\t* ```sizeEndSpread```, ```opacityEndSpread```, ```colorEndSpread```\n\t* ```sizeMiddleSpread```, ```opacityMiddleSpread```, ```colorMiddleSpread```\n\t* ```angleStart``` (replaces ```angle```), ```angleStartSpread```,\n\t* ```angleMiddle```, ```angleMiddleSpread```,\n\t* ```angleEnd```, ```angleEndSpread```\n\n**Version 0.7.2**\n* Moved ```ShaderParticleGroup```, ```ShaderParticleEmitter```, and ```shaderParticleUtils``` to a shared object. ```SPE.Group```, ```SPE.Emitter```, and ```SPE.utils``` respectively.\n\n**Version 0.7.1**\n* Changed the attribute model. Size attributes, opacity attributes, and angle attributes are all squashed into shared attributes using various vector types.\n* Added ```sizeMiddle``` functionality.\n\n**Version 0.7.0**\n* new ShaderParticleUtils object (alpha) to share functions between the Group and Emitter constructors.\n* ShaderParticleGroup.removeEmitter()\n* ShaderParticleEmitter.angle\n* ShaderParticleEmitter.angleAlignVelocity\n\n**Version 0.6.0**\n* To adjust particle sizes, please use `sizeStart` instead of the old `size` property.\n* Particle angles are now supported, thanks to [Stemkoski](https://github.com/stemkoski/).\n\n\n**Version 0.5.1**\n* Fixed some issues with parseFloat and accidental globals. Thanks to [DelvarWorld](https://github.com/DelvarWorld) for noticing these.\n\n\n**Version 0.5.0**\n* The latest update sees the addition of the ```ShaderParticleGroup.addPool()``` method. This allows for much easier control of emitter pools. See [the pool example](http://squarefeet.github.io/ShaderParticleEngine/examples/pool.html) for an example.\n* There are also quite a few bug fixes courtesy of [Stemkoski](https://github.com/stemkoski/).\n* I've also added quite a few more comments to the source-code, so it should be easier to get your head around should you want/need to dig into the internals.\n\n\n\nBuilding\n========\nThis project uses [Grunt](http://gruntjs.com/) to create the distributions, one dev build (not minimized) and one production build (minimized). If you make changes and want to build it, follow these steps:\n\nIf you don't have grunt installed, first make sure you've got [NodeJS](http://nodejs.org/) and NPM installed, then install Grunt CLI. You might have to do this as root:\n\n```npm install -g grunt-cli```\n\nNow you can install the local grunt package:\n\n```cd [projectFolder] && npm install && grunt```\n\n\nThe output of grunt will sit in the `build` folder.\n\n\n\nKnown Bugs\n==========\n* There is an issue using ```SPE.Emitter#angleAlignVelocity``` if your emitter isn't positioned at origin (0, 0, 0). This is being investigated.\n\nSee the [issues page](https://github.com/squarefeet/ShaderParticleEngine/issues) for any known other bugs. Please open an issue if you find anything not behaving properly.\n\n\nSubmitting Pull Requests\n========================\nJust a couple of notes about submitting pull requests:\n* **Indentation**: 4 spaces.\n* **Whitespace**: No trailing whitespace.\n* **JSHint**: If you can, please run JSHint over your forked copy before submitting to make sure there are no common mistakes.\n* **Description**: Please provide a full description of your changes.\n* **Comments**: Follow existing commenting conventions.\n\nThanks :)\n\n\n\n\nThanks\n======\nHuge thanks are extended to [Stemkoski](http://stemkoski.github.io/Three.js/) for his initial particle engine, and to [Mr Doob, AlteredQualia, et. al](https://github.com/mrdoob/three.js/graphs/contributors) for their awesome work on [THREE.js](http://threejs.org/).",
  "readmeFilename": "README.md",
  "_id": "Shader-Particles@0.7.4",
  "description": "ShaderParticleEngine ==================== A GLSL-heavy particle engine for THREE.js. Based on [Stemkoski's great particle engine](https://github.com/stemkoski/stemkoski.github.com/blob/master/Three.js/js/ParticleEngine.js).",
  "dist": {
    "shasum": "7680830ca0b7884cc7fda56feb943b62c613016b"
  },
  "_resolved": "git://github.com/squarefeet/ShaderParticleEngine.git#d93b05c3c43e97d9bcee7de82ae6ad1bd48b4611",
  "_from": "ShaderParticleEngine@git://github.com/squarefeet/ShaderParticleEngine.git"
}
