var skin = require('minecraft-skin');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;

module.exports = function(game) {
    return function(obj, opts) {
        return new Player(game, obj, opts);
    };
};

inherits(Player, EventEmitter);

module.exports.Player = Player;
/*
function Player(game, obj, opts) {
    this.game = game;

    if (!opts) opts = {};
    opts.size = opts.size || this.game.cubeSize;
    opts.velocity = opts.velocity || {
        x: 0,
        y: 0,
        z: 0
    };
    opts.mesh = obj;
    this.item = this.game.addItem(opts);

    this.position = this.item.yaw.position;
    this.rotation = this.item.yaw.rotation;
}
*/
function Player(game, obj, opts) {
    this.game = game;
    this.mountPoint;
    this.possessed;
    this.skin = opts.skin;
    this.skinOpts = opts.skinOpts;
    this.item = this.physical(this.skin, this.skinOpts);
};

Player.prototype.physical = function(img, skinOpts) {
    var game = this.game,
        mountPoint = this.mountPoint,
        possessed = this.possessed;
    if (!skinOpts) {
        skinOpts = {};
    }
    skinOpts.scale = skinOpts.scale || new game.THREE.Vector3(0.04, 0.04, 0.04);
    var playerSkin = skin(game.THREE, img, skinOpts);
    var player = playerSkin.mesh;
    var physics = game.makePhysical(player);
    physics.playerSkin = playerSkin;

    player.position.set(0, 562, -20);
    game.scene.add(player);
    game.addItem(physics);

    physics.yaw = player;
    physics.pitch = player.head;
    physics.subjectTo(game.gravity);
    physics.blocksCreation = true;

    game.control(physics);

    physics.move = function(x, y, z) {
        var xyz = parseXYZ(x, y, z);
        physics.yaw.position.x += xyz.x;
        physics.yaw.position.y += xyz.y;
        physics.yaw.position.z += xyz.z;
    };

    physics.moveTo = function(x, y, z) {
        var xyz = parseXYZ(x, y, z);
        physics.yaw.position.x = xyz.x;
        physics.yaw.position.y = xyz.y;
        physics.yaw.position.z = xyz.z;
    };

    var pov = 1;
    physics.pov = function(type) {
        if (type === 'first' || type === 1) {
            pov = 1;
        } else if (type === 'third' || type === 3) {
            pov = 3;
        }
        physics.possess();
    };

    physics.toggle = function() {
        physics.pov(pov === 1 ? 3 : 1);
    };

    physics.possess = function() {
        if (possessed) possessed.remove(game.camera);
        var key = pov === 1 ? 'cameraInside' : 'cameraOutside';
        player[key].add(game.camera);
        possessed = player[key];
    };

    physics.position = physics.yaw.position;

    return physics;
}

Player.prototype.parseXYZ = function(x, y, z) {
    var game = this.game;
    if (typeof x === 'object' && Array.isArray(x)) {
        return {
            x: x[0],
            y: x[1],
            z: x[2]
        };
    } else if (typeof x === 'object') {
        return {
            x: x.x || 0,
            y: x.y || 0,
            z: x.z || 0
        };
    }
    return {
        x: Number(x),
        y: Number(y),
        z: Number(z)
    };
}